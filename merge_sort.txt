void merge(int input[],int start,int length)
{
    int temp[1000];
    int mid=(start+length)/2;
    int i=start;
    int j=mid+1;
    int k=start;
    while(i<=mid && j<=length)
    {   
        
        if(input[i]<input[j])
          {
             temp[k++]=input[i++];
          }
        else
        {
            temp[k++]=input[j++];
        }
     
    }
    while(i<=mid)
    {
        temp[k++]=input[i++];
    }
    while(j<=length)
    {
        temp[k++]=input[j++];
    }
    
    for(int i=start;i<=length;i++)
         {
            input[i]=temp[i];         
         }

}
void mergehelp(int input[],int start,int length)
{
    if(start>=length)
    {
        return;
    }
    int mid=(start+length)/2;
    mergehelp(input,start,mid);
    mergehelp(input,mid+1,length);
    merge(input,start,length);
}
void mergeSort(int input[],int length)
{
    
    mergehelp(input,0,length-1);   

}


#include <iostream>
#include "solution.h"
using namespace std;

int main() {
  int length;
  cin >> length;
  int* input = new int[length];
  for(int i=0; i < length; i++)
    cin >> input[i];
  mergeSort(input, length);
  for(int i = 0; i < length; i++) {
    cout << input[i] << " ";
  }
}
