int subsetSumToK(int input[], int n, int output[][50], int k)
{
    if(n==0)
    {
        if(k==0)
        {
            output[0][0]=0;
            return 1;
        }
        else
        {
            return 0;
        }
        
    }
    int output1[1000][50];
    int output2[1000][50];
    int s1 = subsetSumToK(input+1,n-1,output1,k);
    int s2 = subsetSumToK(input+1,n-1,output2,k-input[0]);
    for(int i=0;i<s1;i++)
    {
        for(int j=0;j<=output1[i][0];j++)  // works only till 0th column..
        {
            output[i][j]=output1[i][j];
        }
    }
    for(int i=0;i<s2;i++)
    {
        output[i+s1][0] = output2[i][0]+1;
        output[i+s1][1] = input[0];
        for(int j=1;j<=output2[i][0];j++)
        {
            output[i+s1][j+1] = output2[i][j];
        }
    }
    
    return s1 + s2;
    
}


#include <iostream>
#include "solution.h"
using namespace std;

int main() {
  int input[20],length, output[10000][50], k;
  cin >> length;
  for(int i=0; i < length; i++)
    cin >> input[i];

  cin >> k;
  
  int size = subsetSumToK(input, length, output, k);

  for( int i = 0; i < size; i++) { 
	for( int j = 1; j <= output[i][0]; j++) { 
		cout << output[i][j] << " ";
    }
    cout << endl;
  }
}
